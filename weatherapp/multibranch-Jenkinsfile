pipeline {
    agent {
        label "QUALITY-ASSURANCE"
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5'))
    }

    stages {
        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build 
                    cd -
                    ls -la
                '''
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/UI
                    npm run
                '''
            }
        }

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:4.7.0'
                    args '-u root:root'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                script {
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Define your Docker Hub username and access token
                    def dockerHubUser = 'devopseasylearning'
                    def dockerHubAccessToken = 'dckr_pat_BsJ_HqhkoOw66SYpHsK7q5EcCBw'

                    // Docker login command with access token
                    sh "echo ${dockerHubAccessToken} | docker login -u ${dockerHubUser} --password-stdin"
                }
            }
        }

        stage('Build auth') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/auth
                    docker build -t devopseasylearning/weatherapp-auth:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Build UI') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/UI
                    docker build -t devopseasylearning/weatherapp-ui:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Build Weather') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/weather
                    docker build -t devopseasylearning/weatherapp-weather:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Build Redis') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/redis
                    docker build -t devopseasylearning/weatherapp-redis:${BUILD_NUMBER} .
                '''
            }
        }

        stage('Build db') {
            steps {
                sh '''
                    cd $WORKSPACE/weatherapp/db
                    docker build -t devopseasylearning/weatherapp-db:${BUILD_NUMBER} .
                '''
            }
        }
    }

    post {
        success {
            slackSend(channel: 'session5-november-2022', color: 'good', message: "Application The_Weather_app SUCCESSFUL:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        unstable {
            slackSend(channel: 'session5-november-2022', color: 'warning', message: "Application The_Weather_app UNSTABLE:  Branch name  <<${env.BRANCH_NAME}>>  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        failure {
            slackSend(channel: 'session5-november-2022', color: '#FF0000', message: "Application The_Weather_app FAILURE:  Branch name  <<${env.BRANCH_NAME}>> Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        cleanup {  
          deleteDir()
        }
    }  

   
}
