pipeline {
    agent { 
        label "PRODUCTION"
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5'))
    }

    stages {
        stage('Test auth') {
            agent {
                docker {
                    image 'golang:alpine'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/auth/src/main
                    go build 
                    cd -
                    ls -la
                '''
            }
        }

        stage('Test UI') {
            agent {
                docker {
                    image 'node:17'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/UI
                    npm run
                    ls -la
                '''
            }
        }  

        stage('Test weather') {
            agent {
                docker {
                    image 'python:3.8-slim-buster'
                    args '-u root:root'
                }
            }
            steps {
                sh '''
                    id
                    cd weatherapp/weather
                    pip3 install -r requirements.txt
                    ls -la
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('Sonar') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate(abortPipeline: true)
                }
            }
        }

        stage('Login to Docker Hub') {  
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_CREDENTIALS', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh "docker login -u ${DOCKERHUB_USERNAME} --password-stdin <<< ${DOCKERHUB_PASSWORD}"
                    }
                }
            }
        }

        // ... (other stages)

        stage('Generate-compose') {
            agent { 
                label "PRODUCTION"
            }
            when { 
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'WEATHERAPP_MYSQL_ROOT_PASSWORD', variable: 'WEATHERAPP_MYSQL_ROOT_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_REDIS_PASSWORD', variable: 'WEATHERAPP_REDIS_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_DB_PASSWORD', variable: 'WEATHERAPP_DB_PASSWORD'),
                        string(credentialsId: 'WEATHERAPP_APIKEY', variable: 'WEATHERAPP_APIKEY')
                    ]) {
                        echo "MySQL Root Password: ${WEATHERAPP_MYSQL_ROOT_PASSWORD}"
                        echo "Redis Password: ${WEATHERAPP_REDIS_PASSWORD}"
                        echo "DB Password: ${WEATHERAPP_DB_PASSWORD}"
                        echo "API Key: ${WEATHERAPP_APIKEY}"

                        sh '''
                            cat <<EOF > docker-compose.yml
                            version: '3.5'
                            services:
                              # ... (your services definition)

                            networks:
                              weatherapp:
                            
                            volumes:
                              db-data:
                              redis-data:
                            EOF
                        '''
                    }
                }
            }
        }

        stage('Deploy') {
            agent { 
                label "PRODUCTION"
            }
            when { 
                expression {
                    env.GIT_BRANCH == 'origin/develop'
                }
            }
            steps {
                sh '''
                    docker-compose down --remove-orphans || true
                    docker-compose up -d 
                    docker-compose ps 
                '''
            }
        }
    
        stage('checking deployment') {
	      agent { 
                label "PRODUCTION"
                 }
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
            
            bash weatherapp/check.sh
                '''
            }
        }
        stage('checking website') {
	      agent { 
                label "PRODUCTION"
                 }
         when{ 
          expression {
            env.GIT_BRANCH == 'origin/develop' }
            }
            steps {
                sh '''
            sleep 10
            bash weatherapp/check-login.sh
                '''
            }
        }
    }
}


